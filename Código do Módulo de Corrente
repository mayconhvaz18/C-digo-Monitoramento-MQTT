int numberOfSamples = 9000;

// Definir pinos de entrada de corrente e tensão
int inPinI1 = 32;  // Pino GPIO32 no ESP32

// Coeficientes de calibração
double ICAL = 1.08;
#define CT_BURDEN_RESISTOR    62
#define CT_TURNS              1800
#define VOLTAGE               127

// A relação é ajustada pelo valor de calibração ICAL
double I_RATIO = (long double)CT_TURNS / CT_BURDEN_RESISTOR * 3.3 / 4095 * ICAL;  // 3.3V e resolução de 12 bits

// Variáveis do filtro
double lastFilteredI, filteredI;
double sqI, sumI;
// Variáveis de amostra
int lastSampleI, sampleI;

// Variáveis úteis
double Irms1;
unsigned long timer;

void setup() {
  // Configurar entrada analógica
  pinMode(inPinI1, INPUT);
  
  // Inicializar monitor serial
  Serial.begin(115200);  // Velocidade maior para o ESP32
  delay(500);
}

void loop() {
  timer = millis();

  // Fase 1 - Ler amostras e calcular Irms
  for (int n = 0; n < numberOfSamples; n++) {
    // Usado para remover offset
    lastSampleI = sampleI;
    
    // Ler amostras de corrente
    sampleI = analogRead(inPinI1);
    
    // Usado para remover offset
    lastFilteredI = filteredI;
    
    // Filtro digital para remover offset de DC de 1.65V (para ESP32)
    filteredI = 0.9989 * (lastFilteredI + sampleI - lastSampleI);
    
    // Método RMS para corrente
    // 1) quadrado dos valores da corrente
    sqI = filteredI * filteredI;
    // 2) somar
    sumI += sqI;
    delayMicroseconds(20);
  }

  // Calcular RMS (raiz da média dos quadrados) da corrente
  // Aplicar coeficientes de calibração
  Irms1 = (I_RATIO * sqrt(sumI / numberOfSamples)) - 0.16;
  if (Irms1 < 0) { Irms1 = 0; }  // Definir corrente negativa como zero
  sumI = 0;

  // Imprimir resultados no monitor serial
  Serial.println("Corrente: " + String(Irms1) + "A");

  // Calcular e imprimir Potência
  double PowerSum = Irms1 * VOLTAGE;
  Serial.println("Potência: " + String(PowerSum) + "W");

  delay(1000);
}
